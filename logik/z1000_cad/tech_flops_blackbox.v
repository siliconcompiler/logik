// dff blackbox flop primitive generated by FPGA Architect

// Settings used
// enable False
// async_reset False
// async_set False
// sync_reset False
// sync_set False
// clk_edge posedge
// reset_edge negedge
// set_edge negedge
// set_polarity_low True
// sr_priority_set False

(* blackbox *)
module dff
  ( 
    input      clk,
    input      D,
    output reg Q
    );

    always @(posedge clk) begin
            
               Q <= D;
    end
        
   
endmodule

// dffe blackbox flop primitive generated by FPGA Architect

// Settings used
// enable True
// async_reset False
// async_set False
// sync_reset False
// sync_set False
// clk_edge posedge
// reset_edge negedge
// set_edge negedge
// set_polarity_low True
// sr_priority_set False

(* blackbox *)
module dffe
  ( 
    input      clk,
    input      D,
    input      E,
    output reg Q
    );

    always @(posedge clk) begin
            if (E) 
               Q <= D;
    end
        
   
endmodule

// dffr blackbox flop primitive generated by FPGA Architect

// Settings used
// enable False
// async_reset True
// async_set False
// sync_reset False
// sync_set False
// clk_edge posedge
// reset_edge negedge
// set_edge negedge
// set_polarity_low True
// sr_priority_set False

(* blackbox *)
module dffr
  ( 
    input      clk,
    input      D,
    input      R,
    output reg Q
    );

    always @(posedge clk or negedge R) begin
        if (~R) begin
           Q <= 1'b0;
        end
        else begin
            
               Q <= D;
        end
    end
        
   
endmodule

// dffer blackbox flop primitive generated by FPGA Architect

// Settings used
// enable True
// async_reset True
// async_set False
// sync_reset False
// sync_set False
// clk_edge posedge
// reset_edge negedge
// set_edge negedge
// set_polarity_low True
// sr_priority_set False

(* blackbox *)
module dffer
  ( 
    input      clk,
    input      D,
    input      E,
    input      R,
    output reg Q
    );

    always @(posedge clk or negedge R) begin
        if (~R) begin
           Q <= 1'b0;
        end
        else begin
            if (E) 
               Q <= D;
        end
    end
        
   
endmodule

