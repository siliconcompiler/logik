# Auto-generated by FPGA Architect

import os.path
from siliconcompiler import FPGA


####################################################
# Setup for z1000 FPGA
####################################################
def setup():

    part_name = 'z1000'

    fpga = FPGA(part_name, package='logik-fpga-z1000')
    fpga.register_source(
        'logik-fpga-z1000',
        path=os.path.dirname(__file__))

    fpga.set('fpga', part_name, 'vendor', 'fpga_architect')

    fpga.set('fpga', part_name, 'var', 'vpr_device_code', 'z1000')

    fpga.set('fpga', part_name, 'lutsize', 4)
    fpga.add('fpga', part_name, 'var', 'feature_set', 'async_reset')
    fpga.add('fpga', part_name, 'var', 'feature_set', 'enable')
    fpga.add('fpga', part_name, 'var', 'vpr_clock_model', 'route')
    fpga.set('fpga', part_name, 'file', 'archfile', 'z1000.xml')
    fpga.set('fpga', part_name, 'file', 'graphfile', 'z1000_rr_graph.xml')
    fpga.set('fpga', part_name, 'file', 'yosys_fpga_config', 'z1000_yosys_config.json')
    fpga.set('fpga', part_name, 'file', 'yosys_flop_techmap', 'tech_flops.v')

    # Define the macros that can be techmapped to based on the modes
    # that exist in the design
    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_registers', ['dffr', 'dff', 'dffe', 'dffer'])

    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_dsps', ['efpga_mult_addc', 'efpga_mult', 'efpga_acc', 'efpga_mult_regio', 'efpga_adder', 'efpga_acc_regi', 'dsp_mult', 'efpga_adder_regio', 'efpga_mult_addc_regio', 'efpga_macc_pipe', 'efpga_mult_addc_regi', 'efpga_macc_regi', 'efpga_adder_regi', 'efpga_adder_rego', 'efpga_mult_regi', 'efpga_macc', 'efpga_mult_addc_rego', 'efpga_macc_pipe_regi', 'efpga_mult_rego'])

    for tool in ('vpr', 'yosys'):
        fpga.set('fpga', part_name, 'var', f'{tool}_brams', ['sdpram_128x8', 'spram_64x16', 'spram_1024x1', 'sdpram_1024x1', 'sram_sp', 'spram_256x4', 'spram_128x8', 'sram_sdp', 'tdpram_128x8', 'sram_tdp', 'tdpram_256x4', 'tdpram_1024x1', 'spram_512x2', 'sdpram_256x4', 'tdpram_512x2', 'sdpram_512x2'])

    # Set the dsp options for the yosys built-in DSP correctly for this
    # architecture
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_A_MAXWIDTH=18')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_B_MAXWIDTH=18')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_A_MINWIDTH=2')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_B_MINWIDTH=2')
    fpga.add('fpga', part_name, 'var', 'yosys_dsp_options', 'DSP_NAME=_dsp_block_')

    fpga.add('fpga', part_name, 'var', 'dsp_blackbox_options', 'BLACKBOX_MACROS')

    fpga.set('fpga', part_name, 'file', 'bitstream_map', 'z1000_bitstream_map.json')

    fpga.set('fpga', part_name, 'file', 'constraints_map', 'z1000_constraint_map.json')

    fpga.set('fpga', part_name, 'var', 'channelwidth', 100)

    # Add the liberty files to the fpga part.
    fpga.set('fpga', part_name, 'file', 'vtr_primitives_lib', 'vtr_primitives.lib')
    fpga.set('fpga', part_name, 'file', 'fpga_macros_libs', ['tech_flops.lib'])

    return fpga


#########################
if __name__ == "__main__":
    fpga = setup()
    assert fpga.check_filepaths()
    fpga.write_manifest(f'{fpga.design}.json')
